package com.example.capturephoto;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.GridView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Toast;

import com.example.capturephoto.BaseActivity.Extra;

public class MainActivity extends BaseActivity implements View.OnClickListener {
	private static final int CONFIG = Menu.FIRST;
	private static final int EXIT = Menu.FIRST + 1;
	private final String LIST_TEXT = "number";

	private Button btnPz, btnMultiChoice,btnReturn;
	private SimpleDateFormat format;
	private String imageName;

	private static final int TAKE_BIG_PICTURE = 1;
	private static final int CROP_BIG_PICTURE = 2;
	private static final String TAG = "MainActivity";

	private LinearLayout llDefaultView, llDeleteView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		// initListView();
		btnPz = (Button) findViewById(R.id.btn_pz);
		btnPz.setOnClickListener(this);
		format = new SimpleDateFormat("yyyyMMddHHmmss");
		initGridView();
		btnMultiChoice = (Button) findViewById(R.id.btn_multi_choice);
		btnMultiChoice.setOnClickListener(this);
		llDefaultView = (LinearLayout) findViewById(R.id.ll_defaultview);
		llDeleteView = (LinearLayout) findViewById(R.id.ll_deleteview);
		btnReturn = (Button) findViewById(R.id.btn_return);
		btnReturn.setOnClickListener(this);
	}

	GridView gridView;

	ImageAdapter imageAdapter;
	static ArrayList<ImageInfo> imageInfos;

	private void initGridView() {
		imageInfos = new ArrayList<ImageInfo>();
		gridView = (GridView) findViewById(R.id.gridview);
		imageAdapter = new ImageAdapter(MainActivity.this, imageInfos);
		gridView.setAdapter(imageAdapter);
		gridView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> parent, View view,
					int position, long id) {

				// view.setBackgroundResource(R.drawable.login_button_pressed);
				// view.setBackgroundColor(Color.parseColor("#87CEFA"));
				return false;
			}
		});

		gridView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				startImagePagerActivity(position);
			}
		});
	}

	private void startImagePagerActivity(int position) {
		Intent intent = new Intent(this, ImagePagerActivity.class);
		intent.putParcelableArrayListExtra(Extra.IMAGES, imageInfos);
		intent.putExtra(Extra.IMAGE_POSITION, position);
		startActivity(intent);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		menu.add(0, EXIT, 0, "退出应用")/* .setIcon(R.drawable.menu_exit) */;
		menu.add(0, CONFIG, 1, "系统设置");
		// getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		switch (item.getItemId()) {

		case CONFIG:
			Intent intent = new Intent(this, Config.class);
			startActivity(intent);
			break;

		case EXIT:
			MainActivity.this.finish();
			break;

		default:
			break;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btn_pz:
			createPhoto();
			break;
		case R.id.btn_multi_choice:
			llDefaultView.setVisibility(View.GONE);
			llDeleteView.setVisibility(View.VISIBLE);
			break;
		case R.id.btn_return:
			llDefaultView.setVisibility(View.VISIBLE);
			llDeleteView.setVisibility(View.GONE);
			break;
		default:
			break;
		}
	}

	String imagePath;

	private Uri imageUri = null;
	private Bitmap bitmap;

	public void createPhoto() {

		imageName = format.format(System.currentTimeMillis()) + ".jpg";
		Intent intent = new Intent();
		intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);
		// 存储卡可用 将照片存储在 sdcard
		if (FileUtils.isHasSdcard()) {

			if (imagePath == null) {
				imagePath = FileUtils.SDCARD_ROOT_PATH + File.separator
						+ getString(R.string.app_name) + File.separator;
			}
			File file = new File(imagePath);
			if (!file.exists())
				file.mkdirs();
			imageUri = Uri.fromFile(new File(imagePath, imageName));
			intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
			// startActivityForResult(intent, REQUEST_CODE);

			startActivityForResult(intent, /* TAKE_BIG_PICTURE */
					CROP_BIG_PICTURE);

		} else {
			showToast(R.string.toast_nosdcard);
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);

		if (resultCode != RESULT_OK)
			return;
		switch (requestCode) {

		/* 拍照后保存并显示图片 */
		case TAKE_BIG_PICTURE:

			// 存储卡可用
			if (FileUtils.isHasSdcard()) {

				// bitmap = BitmapTools
				// .getBitmapBySampleSize(Dispute.this, imagePath);
				FileInfo fileInfo = new FileInfo();
				fileInfo.fileName = imageName;
				fileInfo.filePath = imagePath;
			} else {
				// 存储卡不可用直接返回缩略图
				Bundle extras = data.getExtras();
				Bitmap bitmap = (Bitmap) extras.get("data");
			}

			// ImageInfo info = new ImageInfo();
			// info.setImageName("T" + fileName);
			// info.setBitmap(bitmap);
			// imageListAdd.add(info);
			// myImageAdapterAdd.notifyDataSetChanged();
			// if (imageListAdd.size() != 0)
			// addgallery.setSelection(imageListAdd.size() - 1);
			BitmapTools.cropImageUri(MainActivity.this, imageUri,
					CROP_BIG_PICTURE);
			break;

		case CROP_BIG_PICTURE:// from crop_big_picture
			Log.e(TAG, "CROP_BIG_PICTURE: data = " + data);// it seems to be
															// null
			if (imageUri != null) {
				imageInfo = new ImageInfo();
				// bitmap = BitmapTools.getBitmapBySampleSize(MainActivity.this,
				// imagePath + imageName);
				// imageInfo.setBitmap(bitmap);
				imageInfo.setFullName(imagePath + imageName);
				imageInfo.setImageUri(imageUri.toString());
				imageInfos.add(imageInfo);
				imageAdapter.notifyDataSetChanged();
			}
			break;
		}
	}

	ImageInfo imageInfo;

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {

		switch (keyCode) {
		case KeyEvent.KEYCODE_BACK:

			break;
		}
		return super.onKeyDown(keyCode, event);
	}

	@Override
	protected void onDestroy() {
		destoryBitmap();
		super.onDestroy();
	}

	private void destoryBitmap() {

		for (ImageInfo imageInfo : imageInfos) {
			Bitmap bitmap = imageInfo.getBitmap();
			BitmapTools.destoryBitmap(bitmap);
			System.err.println(bitmap);
			System.err.println(imageInfo.getBitmap());
		}
		System.gc();
		for (ImageInfo imageInfo : imageInfos) {
			Bitmap bitmap = imageInfo.getBitmap();
			BitmapTools.destoryBitmap(imageInfo.getBitmap());
			System.err.println(imageInfo.getBitmap());
		}
	}

}
