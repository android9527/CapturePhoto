package com.client.capturephoto;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.LinearLayout;
import static com.client.capturephoto.Constant.*;

import com.client.capturephoto.ImageAdapter.ISelectedChangeListener;
import com.client.capturephoto.ImageAdapter.Mode;
import com.google.zxing.client.android.CaptureActivity;
import com.nostra13.universalimageloader.core.ImageLoader;

public class MainActivity extends BaseActivity implements View.OnClickListener,
        AdapterView.OnItemClickListener, ISelectedChangeListener
{
    private static final int CONFIG = Menu.FIRST;
    
    private static final int EXIT = Menu.FIRST + 1;
    
    private EditText mEditTextCode;
    private Button btnCode, btnCapture, btnUpload, btnMultiChoice, btnConfig,
            btnReturn, btnDelete;
    
    private ArrayList<ImageInfo> imageInfos;
    
    private SimpleDateFormat format;
    
    private String imageName;
    
    private static final int TAKE_BIG_PICTURE = 1;
    
    private static final int CROP_BIG_PICTURE = 2;
    
    private final static int SCANNIN_REQUEST_CODE = 5;
    
    private static final String TAG = "MainActivity";
    
    private LinearLayout llDefaultView, llDeleteView;
    
    private GridView myGridView;
    
    private ImageAdapter imageAdapter;
    
    private ImageInfo imageInfo;
    
    private Intent configIntent;
    
    private DensityUtil mDensityUtil;
    private SPUtil spUtil;
    
    private int currentNumber;
    
    private Resources resources;
    
    private int pictureWidth, pictureHeight;
    
    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        format = new SimpleDateFormat("yyyyMMddHHmmss");
        spUtil = SPUtil.getInstance(MainActivity.this);
        mDensityUtil = new DensityUtil(this);
        resources = getResources();
        currentNumber = spUtil.getInt(NUMBER, DEFAULT_NUMBER_POSITION);
        currentNumber = Integer.parseInt(ARRAY_NUMBER[currentNumber]);
        initView();
        initPicture();
        initGridView();
    }
    
    private void initView()
    {
        llDefaultView = (LinearLayout) findViewById(R.id.ll_defaultview);
        llDeleteView = (LinearLayout) findViewById(R.id.ll_deleteview);
        mEditTextCode = (EditText) findViewById(R.id.edittext_code);
        btnCode = (Button) findViewById(R.id.button_code);
        btnCapture = (Button) findViewById(R.id.btn_pz);
        btnUpload = (Button) findViewById(R.id.btn_upload);
        btnMultiChoice = (Button) findViewById(R.id.btn_multi_choice);
        btnConfig = (Button) findViewById(R.id.btn_config);
        btnReturn = (Button) findViewById(R.id.btn_return);
        btnDelete = (Button) findViewById(R.id.btn_delete);
        btnCode.setOnClickListener(this);
        btnCapture.setOnClickListener(this);
        btnUpload.setOnClickListener(this);
        btnMultiChoice.setOnClickListener(this);
        btnConfig.setOnClickListener(this);
        btnDelete.setOnClickListener(this);
        btnReturn.setOnClickListener(this);
        
        
        imageInfos = new ArrayList<ImageInfo>();
        myGridView = (GridView) findViewById(R.id.gridview);
        ImageInfo imageInfo;
        for (int i = 0; i < uris.length; i++)
        {
            imageInfo = new ImageInfo();
            imageInfo.fullName = uris[i];
            imageInfos.add(imageInfo);
        }
        System.err.println("-------------- imageInfos.size() = "
                + imageInfos.size());
        
        imageAdapter = new ImageAdapter(MainActivity.this, imageInfos);
    }

    @Override
    protected void onStart()
    {
        int number = spUtil.getInt(NUMBER, DEFAULT_NUMBER_POSITION);
        number = Integer.parseInt(ARRAY_NUMBER[number]);
        if (currentNumber != number)
        {
            currentNumber = number;
            initPicture();
            imageAdapter.notifyDataSetChanged();
        }
        
        super.onStart();
    }

    private void initGridView()
    {
        myGridView.setAdapter(imageAdapter);
        myGridView.setOnItemClickListener(this);
        imageAdapter.setOnSelectedChangeListener(this);
    }
    
    
    private void initPicture()
    {
        pictureWidth = mDensityUtil.getImageViewWidth(currentNumber,
                resources.getDimensionPixelSize(R.dimen.horizontal_margin),
                resources.getDimensionPixelSize(R.dimen.grid_Spacing));
        pictureHeight = mDensityUtil.getImageViewHeight(pictureWidth);
        myGridView.setNumColumns(currentNumber);
        imageAdapter.setPictureLayoutParams(pictureWidth, pictureHeight);
    }
    private void startImagePagerActivity(int position)
    {
        Intent intent = new Intent(this, ImagePagerActivity.class);
        intent.putParcelableArrayListExtra(Extra.IMAGES, imageInfos);
        intent.putExtra(Extra.IMAGE_POSITION, position);
        startActivity(intent);
    }
    
    @Override
    public boolean onCreateOptionsMenu(Menu menu)
    {
        // Inflate the menu; this adds items to the action bar if it is present.
        menu.add(0, EXIT, 0, R.string.menu_exit)/* .setIcon(R.drawable.menu_exit) */;
        menu.add(0, CONFIG, 1, R.string.menu_config);
        // getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
    
    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
        
        switch (item.getItemId())
        {
        
            case CONFIG:
                if (configIntent == null)
                    configIntent = new Intent(this, ConfigActivity.class);
                startActivity(configIntent);
                break;
            
            case EXIT:
                MainActivity.this.finish();
                break;
            
            default:
                break;
        }
        return super.onOptionsItemSelected(item);
    }
    
    @Override
    public void onClick(View v)
    {
        switch (v.getId())
        {
            case R.id.button_code:
                startActivityForResult(new Intent(this, CaptureActivity.class),
                        SCANNIN_REQUEST_CODE);
                break;
            case R.id.btn_pz:
//                if (imageInfos.size() >= spUtil.getInt(LIMIT,
//                        DEFAULT_LIMIT))
//                {
//                    showToast(R.string.message_limit);
//                }
//                else
//                {
                    startActivity(new Intent(this, TackPictureActivity.class));
//                }
                //                createPhoto();
                break;
            case R.id.btn_multi_choice:
                imageAdapter.setMode(Mode.Pick);
                llDefaultView.setVisibility(View.GONE);
                llDeleteView.setVisibility(View.VISIBLE);
                break;
            case R.id.btn_return:
                imageAdapter.setMode(Mode.View);
                llDefaultView.setVisibility(View.VISIBLE);
                llDeleteView.setVisibility(View.GONE);
                break;
            case R.id.btn_delete:
                showDeleteDialog();
                break;
            case R.id.btn_config:
                if (configIntent == null)
                    configIntent = new Intent(this, ConfigActivity.class);
                startActivity(configIntent);
                break;
            case R.id.btn_upload:
                break;
            default:
                break;
        }
    }
    
    private String imagePath;
    
    private Uri imageUri = null;
    
    public void createPhoto()
    {
        
        imageName = format.format(System.currentTimeMillis()) + ".jpg";
        Intent intent = new Intent();
        intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);
        // ¥Ê¥¢ø®ø…”√ Ω´’’∆¨¥Ê¥¢‘⁄ sdcard
        if (FileUtils.isHasSdcard())
        {
            
            if (imagePath == null)
            {
                imagePath = FileUtils.SDCARD_ROOT_PATH + File.separator
                        + getString(R.string.app_name) + File.separator;
            }
            File file = new File(imagePath);
            if (!file.exists())
                file.mkdirs();
            imageUri = Uri.fromFile(new File(imagePath, imageName));
            intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
            // startActivityForResult(intent, REQUEST_CODE);
            
            startActivityForResult(intent, /* TAKE_BIG_PICTURE */
                    CROP_BIG_PICTURE);
        }
        else
        {
            showToast(R.string.toast_nosdcard);
        }
    }
    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);
        
        if (resultCode != RESULT_OK)
            return;
        switch (requestCode)
        {
        
        /* ≈ƒ’’∫Û±£¥Ê≤¢œ‘ æÕº∆¨ */
            case TAKE_BIG_PICTURE:
                
                // ¥Ê¥¢ø®ø…”√
                if (FileUtils.isHasSdcard())
                {
                    
                    // bitmap = BitmapTools
                    // .getBitmapBySampleSize(Dispute.this, imagePath);
                    FileInfo fileInfo = new FileInfo();
                    fileInfo.fileName = imageName;
                    fileInfo.filePath = imagePath;
                }
                else
                {
                    // ¥Ê¥¢ø®≤ªø…”√÷±Ω”∑µªÿÀı¬‘Õº
                    //                    Bundle extras = data.getExtras();
                    //                    Bitmap bitmap = (Bitmap) extras.get("data");
                }
                
                BitmapTools.cropImageUri(MainActivity.this,
                        imageUri,
                        CROP_BIG_PICTURE);
                break;
            
            case CROP_BIG_PICTURE:// from crop_big_picture
                Log.v(TAG, "CROP_BIG_PICTURE: data = " + data);// it seems to be
                                                               // null
                if (imageUri != null)
                {
                    imageInfo = new ImageInfo();
                    // bitmap = BitmapTools.getBitmapBySampleSize(MainActivity.this,
                    // imagePath + imageName);
                    imageInfo.fullName = imagePath + imageName;
                    imageInfos.add(imageInfo);
                    imageAdapter.notifyDataSetChanged();
                }
                break;
            
            case SCANNIN_REQUEST_CODE:
                //œ‘ æ…®√ËµΩµƒƒ⁄»›
                mEditTextCode.setText(data.getStringExtra(SCAN_RESULT));
                break;
        }
    }
    
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event)
    {
        
        switch (keyCode)
        {
            case KeyEvent.KEYCODE_BACK:
//                System.exit(0);
                break;
        }
        return super.onKeyDown(keyCode, event);
    }
    
    @Override
    public void onBackPressed() {
        ImageLoader.getInstance().stop();
        ImageLoader.getInstance().clearMemoryCache();
        System.exit(0);
        super.onBackPressed();
    }
    
    @Override
    protected void onDestroy()
    {
        Log.e(TAG, "============= onDestroy()");
//        ImageLoader.getInstance().stop();
        System.exit(0);
        super.onDestroy();
    }
    
    private AlertDialog.Builder builder;
    
    private void showDeleteDialog()
    {
        if (builder == null)
        {
            builder = new AlertDialog.Builder(this).setTitle(R.string.dialog_title)
                    .setMessage(R.string.dialog_message);
            builder.setPositiveButton(R.string.button_sure,
                    new DialogInterface.OnClickListener()
                    {
                        
                        @Override
                        public void onClick(DialogInterface dialog, int which)
                        {
                            delete();
                            btnDelete.setText(R.string.button_delete);
                        }
                    });
            
            builder.setNegativeButton(R.string.button_cancel, null);
        }
        builder.show();
    }
    
    private void delete()
    {
        List<ImageInfo> list = imageAdapter.getIsSelected();
        
        for (ImageInfo imageInfo : list)
        {
            imageInfos.remove(imageInfo);
        }
        list.clear();
        imageAdapter.notifyDataSetChanged();
    }
    
    @Override
    public void onItemClick(AdapterView<?> parent, View view,
            int position, long id)
    {
        if (imageAdapter.getMode() == Mode.Pick)
        {
            imageAdapter.setSelected(position, view);
        }
        else
        {
            startImagePagerActivity(position);
        }
    }
    
    
    @Override
    public void onSelectedChange(int count)
    {
        if (count == 0)
            btnDelete.setText(R.string.button_delete);
        else if (count < 10)
            btnDelete.setText(getString(R.string.button_delete) + " 0"
                    + count);
        else
            btnDelete.setText(getString(R.string.button_delete) + " "
                    + count);
    }
}
