/*
 * Copyright (c) 2010-2011, The MiCode Open Source Community (www.micode.net)
 *
 * This file is part of FileExplorer.
 *
 * FileExplorer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FileExplorer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SwiFTP.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.client.capturephoto;

import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;

import android.os.AsyncTask;
import android.util.Log;

public class FileOperationHelper
{
    private static final String LOG_TAG = "FileOperation";
    private ArrayList<ImageInfo> mCurFileNameList = new ArrayList<ImageInfo>();
    private FilenameFilter mFilter;
    
    private IOperationProgressListener mOperationListener;

    public interface IOperationProgressListener {
        void onFinish();
    }

    public FileOperationHelper( IOperationProgressListener l) {
        mOperationListener = l;
    }
    
    public void setFilenameFilter(FilenameFilter f)
    {
        mFilter = f;
    }
    
    @SuppressWarnings("unchecked")
    private void asnycExecute(Runnable r)
    {
        final Runnable _r = r;
        new AsyncTask()
        {
            @Override
            protected Object doInBackground(Object... params)
            {
                _r.run();
                if (mOperationListener != null)
                {
                    mOperationListener.onFinish();
                }
                return null;
            }
        }.execute();
    }
    
    public boolean delete(ArrayList<ImageInfo> files) {
        copyFileList(files);
        asnycExecute(new Runnable() {
            @Override
            public void run() {
                for (ImageInfo f : mCurFileNameList) {
                    deleteFile(f);
                }

            }
        });
        return true;
    }
    
    private void copyFileList(ArrayList<ImageInfo> files) {
        synchronized(mCurFileNameList) {
            mCurFileNameList.clear();
            for (ImageInfo f : files) {
                mCurFileNameList.add(f);
            }
        }
    }
    
    protected boolean deleteFile(ImageInfo f)
    {
        if (f == null)
        {
            Log.e(LOG_TAG, "DeleteFile: null parameter");
            return false;
        }
        
        File file = new File(f.fullName);
        boolean directory = file.isDirectory();
        if (directory)
        {
            // do nothing
            //            for (File child : file.listFiles(mFilter)) {
            //                if (Util.isNormalFile(child.getAbsolutePath())) {
            //                    DeleteFile(Util.GetImageInfo(child, mFilter, true));
            //                }
            //            }
        }
        boolean result = file.delete();
        Log.v(LOG_TAG, "DeleteFile >>> " + f.fullName + " >>> " + result);
        return result;
    }
    
}
